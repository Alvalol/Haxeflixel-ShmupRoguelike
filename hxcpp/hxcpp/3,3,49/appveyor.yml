version: "{build}"

clone_folder: C:\projects\hxcpp

environment:
    global:
        HAXE_ROOT: C:\projects\haxe
        HAXELIB_ROOT: C:\projects\haxelib
        CYG_ROOT: C:\cygwin
        ADD_REVISION: 1
        OCAMLOPT: ocamlopt.opt
        HAXEPATH: "%APPVEYOR_BUILD_FOLDER%"
    matrix:
        - HXCPP_ARCH: "32"
        - HXCPP_ARCH: "64"

cache:
    - ocaml-installer.exe -> appveyor.yml

install:
    # Install ocaml
    - if not exist "ocaml-installer.exe" (
        curl -fsS -o ocaml-installer.exe --retry 3 http://gallium.inria.fr/~protzenk/caml-installer/ocaml-4.02.3-i686-mingw64-installer4-opam.exe
      )
    - ocaml-installer.exe /S
    - 'C:\Users\Public\Desktop\cygwin-setup.exe -g -q -R "%CYG_ROOT%" -P make -P git -P mingw64-i686-zlib'
    - 'set PATH=%PATH%;%CYG_ROOT%\usr\i686-w64-mingw32\sys-root\mingw\bin'
    # Install neko. Just download the chocolatey package instead of building from source in order to save time...
    - cinst neko -y
    - RefreshEnv
    - neko -version
    # Install haxe
    - git clone --recursive --depth 1 -q https://github.com/HaxeFoundation/haxe.git %HAXE_ROOT%
    - 'cd %HAXE_ROOT%'
    - 'set PATH=%PATH%;%HAXE_ROOT%'
    - '%CYG_ROOT%\bin\bash -lc "echo initialize"'
    - '%CYG_ROOT%\bin\bash -lc "cd \"$OLDPWD\" && make -s -f Makefile.win"'
    - haxe -version
    - cd %APPVEYOR_BUILD_FOLDER%
    - mkdir "%HAXELIB_ROOT%"
    - haxelib setup "%HAXELIB_ROOT%"

build_script:
    - haxelib dev hxcpp %APPVEYOR_BUILD_FOLDER%
    - cd %APPVEYOR_BUILD_FOLDER%\tools\run
    - haxe compile.hxml
    - cd %APPVEYOR_BUILD_FOLDER%\tools\hxcpp
    - haxe compile.hxml

test_script:
    - cd %APPVEYOR_BUILD_FOLDER%\test\std
    - haxe compile%HXCPP_ARCH%.hxml && .\cpp%HXCPP_ARCH%\Test
    - cd %APPVEYOR_BUILD_FOLDER%\test\haxe
    - haxe compile.hxml -debug -D HXCPP_M%HXCPP_ARCH% && .\bin\TestMain-debug
    # tests from haxe repo
    - cd %HAXE_ROOT%\tests\unit
    - haxe compile-cpp.hxml -D HXCPP_M%HXCPP_ARCH% && .\bin\cpp\Test-debug
